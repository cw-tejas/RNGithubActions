name: ':runTests'

on:
  issue_comment:
    types: [created]

# Set required permissions for the workflow
permissions:
  contents: read # Required to checkout code
  pull-requests: write # Required to comment on PRs
  issues: write # Required to comment on PRs (PRs are issues in GitHub API)

jobs:
  run-tests-on-command:
    # Only run on PR comments with the exact command
    if: github.event.issue.pull_request && github.event.comment.body == ':runTests'
    runs-on: ubuntu-latest

    steps:
      # Get PR details to checkout the correct branch
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            core.setOutput('sha', pr.data.head.sha);
            core.setOutput('ref', pr.data.head.ref);
            core.setOutput('pr_number', context.issue.number);
            return pr.data;

      # Checkout the specific commit from the PR branch
      - name: Checkout PR code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ steps.pr.outputs.sha }}

      # Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      # Install dependencies
      - name: Install dependencies
        run: npm ci

      # Run all tests in the tests folder and capture output
      - name: Run all tests
        id: tests
        run: |
          echo "Running all tests from tests folder..."

          # Create a temporary file to capture the full output
          TEST_OUTPUT_FILE=$(mktemp)

          # Run tests and capture both stdout and stderr
          npm test -- tests/ --coverage --passWithNoTests --no-color --verbose 2>&1 | tee "$TEST_OUTPUT_FILE"

          # Store the exit code
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          # Get the last 15 lines of output
          LAST_15_LINES=$(tail -n 15 "$TEST_OUTPUT_FILE")

          # Escape special characters and newlines for GitHub Actions output
          ESCAPED_OUTPUT=$(echo "$LAST_15_LINES" | sed 's/"/\\"/g' | sed ':a;N;$!ba;s/\n/\\n/g')

          # Set outputs
          echo "exit_code=$TEST_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "last_15_lines<<EOF" >> $GITHUB_OUTPUT
          echo "$LAST_15_LINES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Clean up
          rm "$TEST_OUTPUT_FILE"

          # Exit with the same code as the test run
          exit $TEST_EXIT_CODE
        continue-on-error: true

      # Post test results as a comment on the PR
      - name: Comment test results on PR
        uses: actions/github-script@v7
        with:
          script: |
            const testResult = '${{ steps.tests.outcome }}';
            const exitCode = '${{ steps.tests.outputs.exit_code }}';
            const sha = '${{ steps.pr.outputs.sha }}';
            const last15Lines = `${{ steps.tests.outputs.last_15_lines }}`;

            let statusEmoji, statusText, resultMessage;

            if (testResult === 'success' && exitCode === '0') {
              statusEmoji = '‚úÖ';
              statusText = 'All Tests Passed!';
              resultMessage = 'All tests from the `tests/` folder have passed successfully.';
            } else {
              statusEmoji = '‚ùå';
              statusText = 'Tests Failed!';
              resultMessage = 'Some tests from the `tests/` folder have failed.';
            }

            const commentBody = `${statusEmoji} **${statusText}**

            ${resultMessage}

            **Commit:** ${sha}

            <details>
            <summary>üìÑ Last 15 lines of test output (click to expand)</summary>

            \`\`\`
            ${last15Lines}
            \`\`\`

            </details>

            ---
            *Triggered by :runTests command*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });

      # Set workflow status based on test results
      - name: Set workflow status
        if: steps.tests.outputs.exit_code != '0'
        run: |
          echo "Tests failed with exit code ${{ steps.tests.outputs.exit_code }}"
          exit 1
